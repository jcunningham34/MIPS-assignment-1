#reading in string in  from user

.data #lets processor know that we will be submitting data to program

userinput:
           .word 4 #make a 4 byte or 32 bit space in memory for something to be stored into
prompt: .asciiz "Enter string: " 
message: .asciiz "\n the string you entered was "

.text

main: #main is always called

#prints prompt message
	la $a0, prompt #load prompt address from memory and store it in $a0
	li $v0, 4 #loading 4 into $v0 is the opcode to print a string
	syscall #executes the previous commands

#storing user input
	la $a0, userinput #loads the address of space and stores it into $a0
	la $a1, userinput #gets the length of $a1 so theres no overflow
	li $v0, 8 #op code for getting user input for a string
	syscall #execute: stores userinput into space which is referenced from $a0

#prints output message
	la $a0, message #load the address of message from memory and store it into $a0
	li $v0, 4 #opcode to print a string
	syscall #reads opcode and prints message stored in $a0

#prints user input
	la $a0, userinput #load address for the users input from memory and store it into $a0
	li $v0, 4 #opcode to print a string
	syscall #computer sees opcode to print the string and prints the string that the address of space points to

	#exit 
	li $v0, 10 #loads op code exit program
	syscall #exits program
