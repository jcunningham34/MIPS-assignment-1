#MIPS 1 Assignment Jarrett Cunningham



.data #lets processor know that we will be submitting data to program

userinput:
           .space 9 #Need space for a 8 digit hex
prompt: .asciiz "Enter string: " 
outputmessage: .asciiz "\n The string you entered was "
invalid: .asciiz "\nInvalid Input\n"
useroutput: .asciiz "\n Your number in Decimal is: "
stringlenmess: .asciiz "\n The length of this string is: "

expnum: .asciiz "\n Your exponent is: "
.text

main: 

#prints prompt message
	la $a0, prompt #load prompt address from memory and store it in $a0
	li $v0, 4 #loading 4 into $v0 is the opcode to print a string
	syscall #executes the previous commands
	

#storing user input
    li $v0, 8 #op code for getting user input for a string
	la $a0, userinput #loads the address of space and stores it into $a0
	la $a1, 9 #gets the length of $a1 so theres no overflow
	syscall 

#prints user input
	la $a0, outputmessage #load the address of message from memory and store it into $a0
	li $v0, 4 #opcode to print a string
	syscall 
	la $a0, userinput #load address for the users input from memory and store it into $a0
	li $v0, 4 #opcode to print a string
	syscall 
	
########################################Finding Length of String##########################################
li $t2,0 #initialize count to zero
lloop:
 lb $t0,0($a0)
 beq $t0,0,exitlloop
 beq $t0,10,exitlloop
 addi $a0, $a0, 1
 addi $t2,$t2, 1
 j lloop
 exitlloop:
 
 #prints user input length
    la $a0, stringlenmess #print length premessage
	li $v0, 4 #opcode to print a string
	syscall
	move $a0, $t2 
	li $v0, 1 #opcode to print the length of the string
	syscall 
	
	#$a0 now has the length of the string
	
###########################################################################################################	

	







 #####################################Converting To Decimal###############################################
  
 move $t5,$a0 #length is in $t5
 move $s0,$t5 #length of string
 li $t0,0 #initialize the i of this loop
 li $t3,0 #initialize overall number for output
 li $t2,0
 la $a0,userinput #loading the users input
 
 
 cloop: #loop for conversion
	lb $t1,0($a0) #start searching each byte
	beq $t1,0,exitcloop
	beq $t1,10,exitcloop
	addi $a0,$a0,1 #move to the next byte
	sub $t5,$t5,1 #incrementing the length - 1
	
	#Checking if the byte falls into the ranges then will send byte to designated loop
	blt $t1,48, Invalid 
	blt $t1,58, Decimal
	blt $t1,65, Invalid
	blt $t1,71, Uppercase
	blt $t1,97, Invalid
	blt $t1,103, Lowercase
	bgt $t1,102, Invalid
	
	Decimal:
	sub $t1,$t1,48 #subtract 48 to get the decimal number of the byte being checked $t1 is ripped char
	sll $t4,$t5,2 #shifting for the exponent value
	sllv $t2,$t1,$t4 #Finding the actual value of the Hex number
	add $t3,$t3,$t2 #overall num is overall num plus value found in this loop
	j cloop
	
	Uppercase:
	sub $t1,$t1,55 #subtract 55 to get the decimal number of the byte being checked
	#addi $t1, $t1, 10 #Adding 10
	sll $t4,$t5,2 #shifting for the exponent value
	sllv $t2,$t1,$t4 #Finding the actual value of the Hex number
	add $t3,$t3,$t2 #overall num = overall num plus value found in this loop
	j cloop
	
	Lowercase:
	sub $t1,$t1,97 #subtract 87 to get the decimal number of the byte being checked
	addi $t1, $t1, 10 #Add 10 for value
	sll $t4,$t5,2 #shifting for the exponent value
	sllv $t2,$t1,$t4 #Finding the actual value of the Hex number
	add $t3,$t3,$t2 #overall num = overall num plus value found in this loop
	j cloop
	
	Invalid: #print invalid message and exit the loop
 	la $a0, invalid #print length premessage
	li $v0, 4 #opcode to print a string
	syscall
	j exit #ends program 
	
	exitcloop:
	move $s3,$t3 #save the overall value
	bgt $s0,7,negnum
	
	negnum:
	li $t7,10000
	
	move $t3,$s3
	divu $t3,$t3,$t7
	mflo $t7
	la $a0, useroutput #print pre message
	li $v0,4 
	syscall
	
	move $a0,$t7
	li $v0,1
	syscall
	mfhi $t7
	move $a0,$t7
	li $v0,1
	syscall
	j exit
	
	j printval
	
	
	
	printval:
	#printing overall value
	 la $a0, useroutput #print pre message
	 li $v0,4 
	 syscall
	 
	 move $a0,$s3
	 li $v0,1
	 syscall
	 
	 j exit
###########################################################################################################################
	

	exit: 
	li $v0, 10 #loads op code exit program
	syscall #exits program